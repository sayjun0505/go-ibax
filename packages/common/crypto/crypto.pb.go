// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crypto.proto

package crypto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AsymAlgo is asymmetric algorithms
type AsymAlgo int32

const (
	AsymAlgo_ECC_P256      AsymAlgo = 0
	AsymAlgo_ECC_Secp256k1 AsymAlgo = 1
	AsymAlgo_SM2           AsymAlgo = 2
	AsymAlgo_ECC_P512      AsymAlgo = 3
)

var AsymAlgo_name = map[int32]string{
	0: "ECC_P256",
	1: "ECC_Secp256k1",
	2: "SM2",
	3: "ECC_P512",
}

var AsymAlgo_value = map[string]int32{
	"ECC_P256":      0,
	"ECC_Secp256k1": 1,
	"SM2":           2,
	"ECC_P512":      3,
}

func (x AsymAlgo) String() string {
	return proto.EnumName(AsymAlgo_name, int32(x))
}

func (AsymAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{0}
}

// SymAlgo is symmetric algorithms
type SymAlgo int32

const (
	SymAlgo_AES SymAlgo = 0
	SymAlgo_SM4 SymAlgo = 1
)

var SymAlgo_name = map[int32]string{
	0: "AES",
	1: "SM4",
}

var SymAlgo_value = map[string]int32{
	"AES": 0,
	"SM4": 1,
}

func (x SymAlgo) String() string {
	return proto.EnumName(SymAlgo_name, int32(x))
}

func (SymAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{1}
}

// HashAlgo is hash algorithms
type HashAlgo int32

const (
	HashAlgo_SHA256    HashAlgo = 0
	HashAlgo_KECCAK256 HashAlgo = 1
	HashAlgo_SM3       HashAlgo = 2
	HashAlgo_SHA3_256  HashAlgo = 3
)

var HashAlgo_name = map[int32]string{
	0: "SHA256",
	1: "KECCAK256",
	2: "SM3",
	3: "SHA3_256",
}

var HashAlgo_value = map[string]int32{
	"SHA256":    0,
	"KECCAK256": 1,
	"SM3":       2,
	"SHA3_256":  3,
}

func (x HashAlgo) String() string {
	return proto.EnumName(HashAlgo_name, int32(x))
}

func (HashAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{2}
}

func init() {
	proto.RegisterEnum("crypto.AsymAlgo", AsymAlgo_name, AsymAlgo_value)
	proto.RegisterEnum("crypto.SymAlgo", SymAlgo_name, SymAlgo_value)
	proto.RegisterEnum("crypto.HashAlgo", HashAlgo_name, HashAlgo_value)
}

func init() { proto.RegisterFile("crypto.proto", fileDescriptor_527278fb02d03321) }

var fileDescriptor_527278fb02d03321 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2e, 0xaa, 0x2c,
	0x28, 0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xb4, 0x9c, 0xb8, 0x38,
	0x1c, 0x8b, 0x2b, 0x73, 0x1d, 0x73, 0xd2, 0xf3, 0x85, 0x78, 0xb8, 0x38, 0x5c, 0x9d, 0x9d, 0xe3,
	0x03, 0x8c, 0x4c, 0xcd, 0x04, 0x18, 0x84, 0x04, 0xb9, 0x78, 0x41, 0xbc, 0xe0, 0xd4, 0xe4, 0x02,
	0x23, 0x53, 0xb3, 0x6c, 0x43, 0x01, 0x46, 0x21, 0x76, 0x2e, 0xe6, 0x60, 0x5f, 0x23, 0x01, 0x26,
	0xb8, 0x4a, 0x53, 0x43, 0x23, 0x01, 0x66, 0x2d, 0x69, 0x2e, 0xf6, 0x60, 0xa8, 0x11, 0xec, 0x5c,
	0xcc, 0x8e, 0xae, 0xc1, 0x02, 0x0c, 0x10, 0xa5, 0x26, 0x02, 0x8c, 0x5a, 0x36, 0x5c, 0x1c, 0x1e,
	0x89, 0xc5, 0x19, 0x60, 0x59, 0x2e, 0x2e, 0xb6, 0x60, 0x0f, 0x47, 0x88, 0xf1, 0xbc, 0x5c, 0x9c,
	0xde, 0xae, 0xce, 0xce, 0x8e, 0xde, 0x20, 0x2e, 0xd4, 0x68, 0x63, 0x88, 0xd1, 0xc1, 0x1e, 0x8e,
	0xc6, 0xf1, 0x20, 0x61, 0x66, 0x27, 0xef, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63,
	0x88, 0x32, 0x4c, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xf7, 0x74, 0x72,
	0x8c, 0xd0, 0xcd, 0xcc, 0xd7, 0x4f, 0xcf, 0xd7, 0xcd, 0x4c, 0x4a, 0xac, 0xd0, 0x2f, 0x48, 0x4c,
	0xce, 0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x87, 0xf8, 0x35,
	0x89, 0x0d, 0xec, 0x75, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xcd, 0xcc, 0xc1, 0x0a,
	0x01, 0x00, 0x00,
}
